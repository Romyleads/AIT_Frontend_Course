// Regular expressions
// RegExp

// Найти фрагмент строки, подходящий под описание
// Можем все вхождения на какую-нибудь другую строку
// Проверить ли соответвует ли строка шаблону - валидации

const text1 = "Hello, Alisher! Oh, Anna, you are also here, well hello there!";

console.log(text1.match(/Hello/));

// Good day, Alisher! Oh, Anna, you are also here, well hello there!
console.log(text1.replace(/Hello/, "Good day"));

// Что такое флаги? i, g
const text2 = "Apple Orange apple orange Apple Orange apple orange";
const newText2 = text2.replace(/apple/, "banana");
// без флага заменяется только первое вхожение
// Apple Orange banana orange Apple Orange apple orange
console.log(newText2);

// флаг g - позволяет работать со всеми входениями, а не только с первым
// Apple Orange banana orange Apple Orange banana orange
console.log(text2.replace(/apple/g, "banana"));

// флаг i - делает нечувствительным к регистру
// banana Orange banana orange banana Orange banana orange
console.log(text2.replace(/apple/gi, "banana"));

// хочу проверить, что выражение состоит из буквы и нескольких чисел

// a87
// b675
// c99

// x88y - нет
const code = "Cakea87";

console.log(code.match(/.87/)); // точка соответствует любому символу - метасимвол для чего угодно

// проверим начинается ли выражение со слова Cake

console.log(code.match(/^Cake/)); // каретка ^ обозначает начало строки

const example = "Hello, John!";

// null - в начале строки, нету указанного выражения
console.log(example.match(/^John/));

// мы можем проверить находится ли слово в конце строки?
// для этого мы воспользуемся $
console.log(example.match(/John!$/)); // конец строки

// Хочу проверить, что выражение из четырех символов начниналось
// на t и заканчивалось на 8

const example2 = "tuh8"; // должно проходить
const example3 = "tuh9"; // должно проходить

console.log(example2.match(/^t..8$/)); // ok
console.log(example3.match(/^t..8$/)); // null

// а если мне нужно найти точку как знак препринания
// aaa.aaa.aaa

const example4 = "aaa.aaa.aaa";
// экранировать точку с помощью обратного слэша
// другие специальные символы тоже придется экранировать
console.log(example4.match(/aaa\.aaa\.aaa/));

// Как обозначить буквенные символы

// Хочу, чтобы слово начиналось с букв h, l или b?
// hate, late, bate - ok
// wate - не ок

const example5 = "hate";

// любая из трех подойдет в качестве первого символа
console.log(example5.match(/[hlb]ate/));
console.log("wate".match(/[hlb]ate/)); // null

// слово должно начинаться на букву F дальше на втором месте
// должна быть буква a или цифра 6
// на третьем месте может быть любой символ
// слово должно закончится на любую строчную букву - нижний регистр
const word = "F6mv"; // ok

console.log(word.match(/^F[a6].[a-z]$/)); // ok

// [A-Za-z] все буквы
// [A-Za-z0-9] - буква или цифра

// Что такое флаги?

// i - игнорировать регистр
// g - искать все вхождения
// m - многострочный режим
// s - точка может совпадать с символом новой строки
// u - поддержка юникода
// y - ищем совпадение только с текущей позиции
// x - игнорировать пробелы и комментарии
// . - совпадает с любым символом, кроме символа новой строки (\n)
// \d - совпадает с любой цифрой
// \D - совпадает с любым символом, кроме цифры
// \w - совпадает с любой буквой, цифрой или символом подчеркивания
// \W - совпадает с любым символом, кроме буквы, цифры или символа подчеркивания
// \s - совпадает с любым пробелом
// \S - совпадает с любым символом, кроме пробела
// \b - совпадает с границей слова
// \B - совпадает с границей не слова
// \n - совпадает с символом новой строки
// \t - совпадает с символом табуляции
// \r - совпадает с символом возврата каретки
// \f - совпадает с символом перевода страницы
// \v - совпадает с символом вертикальной табуляции
// \0 - совпадает с символом нулевого байта
// \x - совпадает с символом, код которого в шестнадцатеричной системе счисления равен x
// \u - совпадает с символом, код которого в десятичной системе счисления равен u
// \c - совпадает с символом, код которого в восьмеричной системе счисления равен c
// ^ - совпадает с началом строки
// $ - совпадает с концом строки
// ? - совпадает с нулем или одним вхождением
// * - совпадает с нулем или несколькими вхождениями
// + - совпадает с одним или несколькими вхождениями
// {n} - совпадает с n вхождениями
// {n,} - совпадает с n или несколькими вхождениями
// {n,m} - совпадает с n или m вхождениями
// [abc] - совпадает с любым символом из набора abc
// [^abc] - совпадает с любым символом, кроме a, b, c
// [a-z] - совпадает с любым символом из диапазона a-z
// [A-Z] - совпадает с любым символом из диапазона A-Z
// [0-9] - совпадает с любой цифрой
// [a-zA-Z] - совпадает с любой буквой
// [a-zA-Z0-9] - совпадает с любой буквой или цифрой
// [a-zA-Z0-9_] - совпадает с любой буквой, цифрой или символом подчеркивания

// [a-zA-Z0-9\s] - совпадает с любой буквой, цифрой или пробелом




